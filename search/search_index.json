{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GuessIt \u00b6 GuessIt is a python library that extracts as much information as possible from a video filename. It has a very powerful matcher that allows to guess properties from a video using its filename only. This matcher works with both movies and tv shows episodes. For example, GuessIt can do the following: $ guessit \"Treme.1x03.Right.Place,.Wrong.Time.HDTV.XviD-NoTV.avi\" For: Treme.1x03.Right.Place,.Wrong.Time.HDTV.XviD-NoTV.avi GuessIt found: { \"title\" : \"Treme\" , \"season\" : 1 , \"episode\" : 3 , \"episode_title\" : \"Right Place, Wrong Time\" , \"source\" : \"HDTV\" , \"video_codec\" : \"Xvid\" , \"release_group\" : \"NoTV\" , \"container\" : \"avi\" , \"mimetype\" : \"video/x-msvideo\" , \"type\" : \"episode\" } Migration note \u00b6 In GuessIt 3, some properties and values were renamed in order to keep consistency and to be more intuitive. To migrate from guessit 2.x to guessit 3.x , please read the migration page\\<migration2to3>. To migrate from guessit 0.x or 1.x to guessit 2.x , please read the migration page\\<migration>. Install \u00b6 Installing GuessIt is simple with pip : $ pip install guessit You can also install from sources \\<sources>. Usage \u00b6 GuessIt can be used from command line: $ guessit usage: guessit [ -h ] [ -t TYPE ] [ -n ] [ -Y ] [ -D ] [ -L ALLOWED_LANGUAGES ] [ -C ALLOWED_COUNTRIES ] [ -E ] [ -T EXPECTED_TITLE ] [ -G EXPECTED_GROUP ] [ --includes INCLUDES ] [ --excludes EXCLUDES ] [ -f INPUT_FILE ] [ -v ] [ -P SHOW_PROPERTY ] [ -a ] [ -s ] [ -l ] [ -j ] [ -y ] [ -c CONFIG ] [ --no-user-config ] [ --no-default-config ] [ -p ] [ -V ] [ --version ] [ filename [ filename ... ]] positional arguments: filename Filename or release name to guess optional arguments: -h, --help show this help message and exit Naming: -t TYPE, --type TYPE The suggested file type: movie, episode. If undefined, type will be guessed. -n, --name-only Parse files as name only, considering \"/\" and \"\\\" like other separators. -Y, --date-year-first If short date is found, consider the first digits as the year. -D, --date-day-first If short date is found, consider the second digits as the day. -L ALLOWED_LANGUAGES, --allowed-languages ALLOWED_LANGUAGES Allowed language (can be used multiple times) -C ALLOWED_COUNTRIES, --allowed-countries ALLOWED_COUNTRIES Allowed country (can be used multiple times) -E, --episode-prefer-number Guess \" serie.213.avi \" as the episode 213. Without this option, it will be guessed as season 2, episode 13 -T EXPECTED_TITLE, --expected-title EXPECTED_TITLE Expected title to parse (can be used multiple times) -G EXPECTED_GROUP, --expected-group EXPECTED_GROUP Expected release group (can be used multiple times) --includes INCLUDES List of properties to be detected --excludes EXCLUDES List of properties to be ignored Input: -f INPUT_FILE, --input-file INPUT_FILE Read filenames from an input text file. File should use UTF-8 charset. Output: -v, --verbose Display debug output -P SHOW_PROPERTY, --show-property SHOW_PROPERTY Display the value of a single property (title, series, video_codec, year, ...) -a, --advanced Display advanced information for filename guesses, as json output -s, --single-value Keep only first value found for each property -l, --enforce-list Wrap each found value in a list even when property has a single value -j, --json Display information for filename guesses as json output -y, --yaml Display information for filename guesses as yaml output Configuration: -c CONFIG, --config CONFIG Filepath to configuration file. Configuration file contains the same options as those from command line options, but option names have \" - \" characters replaced with \" _ \". This configuration will be merged with default and user configuration files. --no-user-config Disable user configuration. If not defined, guessit tries to read configuration files at ~/.guessit/options.(json|yml|yaml) and ~/.config/guessit/options.(json|yml|yaml) --no-default-config Disable default configuration. This should be done only if you are providing a full configuration through user configuration or --config option. Information: -p, --properties Display properties that can be guessed. -V, --values Display property values that can be guessed. --version Display the guessit version. It can also be used as a python module: >>> from guessit import guessit >>> guessit ( 'Treme.1x03.Right.Place,.Wrong.Time.HDTV.XviD-NoTV.avi' ) # doctest: +ALLOW_UNICODE MatchesDict ([( 'title' , 'Treme' ), ( 'season' , 1 ), ( 'episode' , 3 ), ( 'episode_title' , 'Right Place, Wrong Time' ), ( 'source' , 'HDTV' ), ( 'video_codec' , 'XviD' ), ( 'release_group' , 'NoTV' ), ( 'container' , 'avi' ), ( 'mimetype' , 'video/x-msvideo' ), ( 'type' , 'episode' )]) MatchesDict is a dict that keeps matches ordering. Command line options can be given as dict or string to the second argument. Configuration \u00b6 Find more about Guessit configuration at configuration page\\<configuration>. REST API \u00b6 A REST API will be available soon ... Sources are available in a dedicated guessit-rest repository . Support \u00b6 This project is hosted on GitHub . Feel free to open an issue if you think you have found a bug or something is missing in guessit. GuessIt relies on Rebulk project for pattern and rules registration. License \u00b6 GuessIt is licensed under the LGPLv3 license .","title":"Home"},{"location":"#guessit","text":"GuessIt is a python library that extracts as much information as possible from a video filename. It has a very powerful matcher that allows to guess properties from a video using its filename only. This matcher works with both movies and tv shows episodes. For example, GuessIt can do the following: $ guessit \"Treme.1x03.Right.Place,.Wrong.Time.HDTV.XviD-NoTV.avi\" For: Treme.1x03.Right.Place,.Wrong.Time.HDTV.XviD-NoTV.avi GuessIt found: { \"title\" : \"Treme\" , \"season\" : 1 , \"episode\" : 3 , \"episode_title\" : \"Right Place, Wrong Time\" , \"source\" : \"HDTV\" , \"video_codec\" : \"Xvid\" , \"release_group\" : \"NoTV\" , \"container\" : \"avi\" , \"mimetype\" : \"video/x-msvideo\" , \"type\" : \"episode\" }","title":"GuessIt"},{"location":"#migration-note","text":"In GuessIt 3, some properties and values were renamed in order to keep consistency and to be more intuitive. To migrate from guessit 2.x to guessit 3.x , please read the migration page\\<migration2to3>. To migrate from guessit 0.x or 1.x to guessit 2.x , please read the migration page\\<migration>.","title":"Migration note"},{"location":"#install","text":"Installing GuessIt is simple with pip : $ pip install guessit You can also install from sources \\<sources>.","title":"Install"},{"location":"#usage","text":"GuessIt can be used from command line: $ guessit usage: guessit [ -h ] [ -t TYPE ] [ -n ] [ -Y ] [ -D ] [ -L ALLOWED_LANGUAGES ] [ -C ALLOWED_COUNTRIES ] [ -E ] [ -T EXPECTED_TITLE ] [ -G EXPECTED_GROUP ] [ --includes INCLUDES ] [ --excludes EXCLUDES ] [ -f INPUT_FILE ] [ -v ] [ -P SHOW_PROPERTY ] [ -a ] [ -s ] [ -l ] [ -j ] [ -y ] [ -c CONFIG ] [ --no-user-config ] [ --no-default-config ] [ -p ] [ -V ] [ --version ] [ filename [ filename ... ]] positional arguments: filename Filename or release name to guess optional arguments: -h, --help show this help message and exit Naming: -t TYPE, --type TYPE The suggested file type: movie, episode. If undefined, type will be guessed. -n, --name-only Parse files as name only, considering \"/\" and \"\\\" like other separators. -Y, --date-year-first If short date is found, consider the first digits as the year. -D, --date-day-first If short date is found, consider the second digits as the day. -L ALLOWED_LANGUAGES, --allowed-languages ALLOWED_LANGUAGES Allowed language (can be used multiple times) -C ALLOWED_COUNTRIES, --allowed-countries ALLOWED_COUNTRIES Allowed country (can be used multiple times) -E, --episode-prefer-number Guess \" serie.213.avi \" as the episode 213. Without this option, it will be guessed as season 2, episode 13 -T EXPECTED_TITLE, --expected-title EXPECTED_TITLE Expected title to parse (can be used multiple times) -G EXPECTED_GROUP, --expected-group EXPECTED_GROUP Expected release group (can be used multiple times) --includes INCLUDES List of properties to be detected --excludes EXCLUDES List of properties to be ignored Input: -f INPUT_FILE, --input-file INPUT_FILE Read filenames from an input text file. File should use UTF-8 charset. Output: -v, --verbose Display debug output -P SHOW_PROPERTY, --show-property SHOW_PROPERTY Display the value of a single property (title, series, video_codec, year, ...) -a, --advanced Display advanced information for filename guesses, as json output -s, --single-value Keep only first value found for each property -l, --enforce-list Wrap each found value in a list even when property has a single value -j, --json Display information for filename guesses as json output -y, --yaml Display information for filename guesses as yaml output Configuration: -c CONFIG, --config CONFIG Filepath to configuration file. Configuration file contains the same options as those from command line options, but option names have \" - \" characters replaced with \" _ \". This configuration will be merged with default and user configuration files. --no-user-config Disable user configuration. If not defined, guessit tries to read configuration files at ~/.guessit/options.(json|yml|yaml) and ~/.config/guessit/options.(json|yml|yaml) --no-default-config Disable default configuration. This should be done only if you are providing a full configuration through user configuration or --config option. Information: -p, --properties Display properties that can be guessed. -V, --values Display property values that can be guessed. --version Display the guessit version. It can also be used as a python module: >>> from guessit import guessit >>> guessit ( 'Treme.1x03.Right.Place,.Wrong.Time.HDTV.XviD-NoTV.avi' ) # doctest: +ALLOW_UNICODE MatchesDict ([( 'title' , 'Treme' ), ( 'season' , 1 ), ( 'episode' , 3 ), ( 'episode_title' , 'Right Place, Wrong Time' ), ( 'source' , 'HDTV' ), ( 'video_codec' , 'XviD' ), ( 'release_group' , 'NoTV' ), ( 'container' , 'avi' ), ( 'mimetype' , 'video/x-msvideo' ), ( 'type' , 'episode' )]) MatchesDict is a dict that keeps matches ordering. Command line options can be given as dict or string to the second argument.","title":"Usage"},{"location":"#configuration","text":"Find more about Guessit configuration at configuration page\\<configuration>.","title":"Configuration"},{"location":"#rest-api","text":"A REST API will be available soon ... Sources are available in a dedicated guessit-rest repository .","title":"REST API"},{"location":"#support","text":"This project is hosted on GitHub . Feel free to open an issue if you think you have found a bug or something is missing in guessit. GuessIt relies on Rebulk project for pattern and rules registration.","title":"Support"},{"location":"#license","text":"GuessIt is licensed under the LGPLv3 license .","title":"License"},{"location":"configuration/","text":"Configuration files \u00b6 Guessit supports configuration through configuration files. Default configuration file is bundled inside guessit package from config/options.json file. It is possible to disable the default configuration with --no-default-config option, but you have then to provide a full configuration file based on the default one. Configuration files are loaded from the following paths: ~/.guessit/options.(json|yml|yaml) ~/.config/guessit/options.(json|yml|yaml) It is also possible to disable those user configuration files with no-user-config option. Additional configuration files can be included using the -c / --config option. As many configuration files can be involved, they are deeply merged to keep all values inside the effective configuration. Advanced configuration \u00b6 Configuration files contains all options available through the command line, but also an additional one named advanced_config . This advanced configuration contains all internal parameters and they are exposed to help you tweaking guessit to better fit your needs. If no advanced_config is declared through all effective configuration files, the default one will be used even when --no-default-config is used. We're willing to keep it backwards compatible, but in order to enhance Guessit, these parameters might change without prior notice.","title":"Configuration"},{"location":"configuration/#configuration-files","text":"Guessit supports configuration through configuration files. Default configuration file is bundled inside guessit package from config/options.json file. It is possible to disable the default configuration with --no-default-config option, but you have then to provide a full configuration file based on the default one. Configuration files are loaded from the following paths: ~/.guessit/options.(json|yml|yaml) ~/.config/guessit/options.(json|yml|yaml) It is also possible to disable those user configuration files with no-user-config option. Additional configuration files can be included using the -c / --config option. As many configuration files can be involved, they are deeply merged to keep all values inside the effective configuration.","title":"Configuration files"},{"location":"configuration/#advanced-configuration","text":"Configuration files contains all options available through the command line, but also an additional one named advanced_config . This advanced configuration contains all internal parameters and they are exposed to help you tweaking guessit to better fit your needs. If no advanced_config is declared through all effective configuration files, the default one will be used even when --no-default-config is used. We're willing to keep it backwards compatible, but in order to enhance Guessit, these parameters might change without prior notice.","title":"Advanced configuration"},{"location":"migration/","text":"Migration \u00b6 Guessit 2 has been rewritten from scratch. You can find in this file all information required to perform a migration from previous version 0.x or 1.x . API \u00b6 guess_video_info , guess_movie_info and guess_episode_info have been removed in favor of a unique function guessit . Example: >>> from guessit import guessit >>> guessit ( 'Treme.1x03.Right.Place,.Wrong.Time.HDTV.XviD-NoTV.avi' ) MatchesDict ([( 'title' , 'Treme' ), ( 'season' , 1 ), ( 'episode' , 3 ), ( 'episode_title' , 'Right Place, Wrong Time' ), ( 'format' , 'HDTV' ), ( 'video_codec' , 'XviD' ), ( 'release_group' , 'NoTV' ), ( 'container' , 'avi' ), ( 'mimetype' , 'video/x-msvideo' ), ( 'type' , 'episode' )]) MatchesDict is a dict that keeps matches ordering. Command line options can be given as dict or string to the second argument. Properties \u00b6 Some properties have been renamed. series is now title . title is now episode_title (for episode type only). episodeNumber is now episode . bonusNumber is now bonus filmNumber is now film cdNumber is now cd and cdNumberTotal is now cd_count idNumber is now uuid episodeList and partList have been removed. episode_number and part properties that can now contains an int or a list[int] . All info type , like seriesinfo and movieinfo . You can check directly nfo value in container property. All camelCase properties have been renamed to underscore_case . releaseGroup is now release_group episodeCount is now episode_count episodeDetails is now episode_details episodeFormat is now episode_format screenSize is now screen_size videoCodec is now video_codec videoProfile is now video_profile videoApi is now video_api audioChannels is now audio_channels audioCodec is now audio_codec audioProfile is now audio_profile subtitleLanguage is now subtitle_language bonusTitle is now bonus_title properCount is now proper_count Options \u00b6 Some options have been removed. -X DISABLED_TRANSFORMERS , -s, --transformers There's no transformer anymore. -S EXPECTED_SERIES As series was renamed to title , use -T EXPECTED_TITLE instead. -G EXPECTED_GROUP GuessIt is now better to guess release group, so this option has been removed. -d, --demo Probably not that useful. -i INFO, --info INFO Features related to this option have been removed. -c, --split-camel , -u, --unidentified , -b, --bug Will be back soon... (work in progress) Other GuessIt 1.x options have been kept. Output \u00b6 Output produced by guessit api function is now an instance of OrderedDict . Property values are automatically ordered based on filename, and you can still use this output as a default python dict . If multiple values are available for a property, value in the dict will be a list instance. country 2-letter code is not added to the title anymore. As country is added to the returned guess dict, it's up to the user to edit the guessed title. Advanced display option ( -a, --advanced ) output is also changed. It now list Match objects from Rebulk , and may display duplicates that would have been merged in standard output.: $ guessit \"Treme.1x03.Right.Place,.Wrong.Time.HDTV.XviD-NoTV.avi\" -a For: Treme.1x03.Right.Place,.Wrong.Time.HDTV.XviD-NoTV.avi GuessIt found: { \"title\" : { \"value\" : \"Treme\" , \"raw\" : \"Treme.\" , \"start\" : 0 , \"end\" : 6 } , \"season\" : { \"value\" : 1 , \"raw\" : \"1\" , \"start\" : 6 , \"end\" : 7 } , \"episode\" : { \"value\" : 3 , \"raw\" : \"03\" , \"start\" : 8 , \"end\" : 10 } , \"episode_title\" : { \"value\" : \"Right Place, Wrong Time\" , \"raw\" : \".Right.Place,.Wrong.Time.\" , \"start\" : 10 , \"end\" : 35 } , \"format\" : { \"value\" : \"HDTV\" , \"raw\" : \"HDTV\" , \"start\" : 35 , \"end\" : 39 } , \"video_codec\" : { \"value\" : \"XviD\" , \"raw\" : \"XviD\" , \"start\" : 40 , \"end\" : 44 } , \"release_group\" : { \"value\" : \"NoTV\" , \"raw\" : \"-NoTV\" , \"start\" : 44 , \"end\" : 49 } , \"container\" : { \"value\" : \"avi\" , \"raw\" : \".avi\" , \"start\" : 49 , \"end\" : 53 } , \"mimetype\" : { \"value\" : \"video/x-msvideo\" , \"start\" : 53 , \"end\" : 53 } , \"type\" : { \"value\" : \"episode\" , \"start\" : 53 , \"end\" : 53 } }","title":"Migration (1.x to 2.x)"},{"location":"migration/#migration","text":"Guessit 2 has been rewritten from scratch. You can find in this file all information required to perform a migration from previous version 0.x or 1.x .","title":"Migration"},{"location":"migration/#api","text":"guess_video_info , guess_movie_info and guess_episode_info have been removed in favor of a unique function guessit . Example: >>> from guessit import guessit >>> guessit ( 'Treme.1x03.Right.Place,.Wrong.Time.HDTV.XviD-NoTV.avi' ) MatchesDict ([( 'title' , 'Treme' ), ( 'season' , 1 ), ( 'episode' , 3 ), ( 'episode_title' , 'Right Place, Wrong Time' ), ( 'format' , 'HDTV' ), ( 'video_codec' , 'XviD' ), ( 'release_group' , 'NoTV' ), ( 'container' , 'avi' ), ( 'mimetype' , 'video/x-msvideo' ), ( 'type' , 'episode' )]) MatchesDict is a dict that keeps matches ordering. Command line options can be given as dict or string to the second argument.","title":"API"},{"location":"migration/#properties","text":"Some properties have been renamed. series is now title . title is now episode_title (for episode type only). episodeNumber is now episode . bonusNumber is now bonus filmNumber is now film cdNumber is now cd and cdNumberTotal is now cd_count idNumber is now uuid episodeList and partList have been removed. episode_number and part properties that can now contains an int or a list[int] . All info type , like seriesinfo and movieinfo . You can check directly nfo value in container property. All camelCase properties have been renamed to underscore_case . releaseGroup is now release_group episodeCount is now episode_count episodeDetails is now episode_details episodeFormat is now episode_format screenSize is now screen_size videoCodec is now video_codec videoProfile is now video_profile videoApi is now video_api audioChannels is now audio_channels audioCodec is now audio_codec audioProfile is now audio_profile subtitleLanguage is now subtitle_language bonusTitle is now bonus_title properCount is now proper_count","title":"Properties"},{"location":"migration/#options","text":"Some options have been removed. -X DISABLED_TRANSFORMERS , -s, --transformers There's no transformer anymore. -S EXPECTED_SERIES As series was renamed to title , use -T EXPECTED_TITLE instead. -G EXPECTED_GROUP GuessIt is now better to guess release group, so this option has been removed. -d, --demo Probably not that useful. -i INFO, --info INFO Features related to this option have been removed. -c, --split-camel , -u, --unidentified , -b, --bug Will be back soon... (work in progress) Other GuessIt 1.x options have been kept.","title":"Options"},{"location":"migration/#output","text":"Output produced by guessit api function is now an instance of OrderedDict . Property values are automatically ordered based on filename, and you can still use this output as a default python dict . If multiple values are available for a property, value in the dict will be a list instance. country 2-letter code is not added to the title anymore. As country is added to the returned guess dict, it's up to the user to edit the guessed title. Advanced display option ( -a, --advanced ) output is also changed. It now list Match objects from Rebulk , and may display duplicates that would have been merged in standard output.: $ guessit \"Treme.1x03.Right.Place,.Wrong.Time.HDTV.XviD-NoTV.avi\" -a For: Treme.1x03.Right.Place,.Wrong.Time.HDTV.XviD-NoTV.avi GuessIt found: { \"title\" : { \"value\" : \"Treme\" , \"raw\" : \"Treme.\" , \"start\" : 0 , \"end\" : 6 } , \"season\" : { \"value\" : 1 , \"raw\" : \"1\" , \"start\" : 6 , \"end\" : 7 } , \"episode\" : { \"value\" : 3 , \"raw\" : \"03\" , \"start\" : 8 , \"end\" : 10 } , \"episode_title\" : { \"value\" : \"Right Place, Wrong Time\" , \"raw\" : \".Right.Place,.Wrong.Time.\" , \"start\" : 10 , \"end\" : 35 } , \"format\" : { \"value\" : \"HDTV\" , \"raw\" : \"HDTV\" , \"start\" : 35 , \"end\" : 39 } , \"video_codec\" : { \"value\" : \"XviD\" , \"raw\" : \"XviD\" , \"start\" : 40 , \"end\" : 44 } , \"release_group\" : { \"value\" : \"NoTV\" , \"raw\" : \"-NoTV\" , \"start\" : 44 , \"end\" : 49 } , \"container\" : { \"value\" : \"avi\" , \"raw\" : \".avi\" , \"start\" : 49 , \"end\" : 53 } , \"mimetype\" : { \"value\" : \"video/x-msvideo\" , \"start\" : 53 , \"end\" : 53 } , \"type\" : { \"value\" : \"episode\" , \"start\" : 53 , \"end\" : 53 } }","title":"Output"},{"location":"migration2to3/","text":"Migration \u00b6 Guessit 3 has introduced breaking changes from previous versions. You can find in this file all information required to perform a migration from previous version 2.x . API \u00b6 No changes. Properties \u00b6 Some properties have been renamed. format is now source . Values \u00b6 The major changes in GuessIt 3 are around the values. Values were renamed in order to keep consistency and to be more intuitive. Acronyms are uppercase (e.g.: HDTV ). Names follow the official name (e.g.: Blu-ray ). Words have only the first letter capitalized (e.g.: Camera ) except prepositions (e.g.: on ) which are all lowercase. The following values were changed: source (former format property) \u00b6 Cam is now Camera or HD Camera Telesync is now Telesync or HD Telesync PPV is now Pay-per-view DVB is now Digital TV VOD is now Video on Demand WEBRip is now Web with additional property other: Rip WEB-DL is now Web AHDTV is now Analog HDTV UHDTV is now Ultra HDTV HDTC is now HD Telecine screen_size \u00b6 360i was added. 480i was added. 576i was added. 900i was added. 4K is now 2160p 4320p was added. video_codec \u00b6 h264 is now H.264 h265 is now H.265 Mpeg2 is now MPEG-2 Real is now RealVideo XviD is now Xvid video_profile \u00b6 BP is now Baseline . HP is now High . XP is now Extended . MP is now Main . Hi422P is now High 4:2:2 . Hi444PP is now High 4:4:4 Predictive . High 10 was added. 8bit was removed. 8bit is detected as color_depth: 8-bit 10bit was removed. 10bit is detected as color_depth: 10-bit audio_codec \u00b6 DTS-HD was added. AC3 is now Dolby Digital EAC3 is now Dolby Digital Plus TrueHD is now Dolby TrueHD DolbyAtmos is now Dolby Atmos . audio_profile \u00b6 HE is now High Efficiency . LC is now Low Complexity . HQ is now High Quality . HDMA is now Master Audio . edition \u00b6 Collector Edition is now Collector Special Edition is now Special Criterion Edition is now Criterion Deluxe Edition is now Deluxe Limited Edition is now Limited Theatrical Edition is now Theatrical Director's Definitive Cut was added. episode_details \u00b6 Oav and Ova were removed. They are now other: Original Animated Video Omake is now Extras Final was added. other \u00b6 Rip was added. E.g.: DVDRip will output other: Rip DDC was removed. DDC is now edition: Director's Definitive Cut CC was removed. CC is now edition: Criterion FINAL was removed. FINAL is now episode_details: Final Original Animated Video was added. OV is now Original Video AudioFix is now Audio Fixed SyncFix is now Sync Fixed DualAudio is now Dual Audio Fansub is now Fan Subtitled Fastsub is now Fast Subtitled FullHD is now Full HD UltraHD is now Ultra HD mHD and HDLight are now Micro HD HQ is now High Quality HR is now High Resolution LD is now Line Dubbed MD is now Mic Dubbed Low Definition was added. LiNE is now Line Audio R5 is now Region 5 Region C was added. ReEncoded is now Reencoded WideScreen is now Widescreen","title":"Migration (2.x to 3.x)"},{"location":"migration2to3/#migration","text":"Guessit 3 has introduced breaking changes from previous versions. You can find in this file all information required to perform a migration from previous version 2.x .","title":"Migration"},{"location":"migration2to3/#api","text":"No changes.","title":"API"},{"location":"migration2to3/#properties","text":"Some properties have been renamed. format is now source .","title":"Properties"},{"location":"migration2to3/#values","text":"The major changes in GuessIt 3 are around the values. Values were renamed in order to keep consistency and to be more intuitive. Acronyms are uppercase (e.g.: HDTV ). Names follow the official name (e.g.: Blu-ray ). Words have only the first letter capitalized (e.g.: Camera ) except prepositions (e.g.: on ) which are all lowercase. The following values were changed:","title":"Values"},{"location":"migration2to3/#source-former-format-property","text":"Cam is now Camera or HD Camera Telesync is now Telesync or HD Telesync PPV is now Pay-per-view DVB is now Digital TV VOD is now Video on Demand WEBRip is now Web with additional property other: Rip WEB-DL is now Web AHDTV is now Analog HDTV UHDTV is now Ultra HDTV HDTC is now HD Telecine","title":"source (former format property)"},{"location":"migration2to3/#screen_size","text":"360i was added. 480i was added. 576i was added. 900i was added. 4K is now 2160p 4320p was added.","title":"screen_size"},{"location":"migration2to3/#video_codec","text":"h264 is now H.264 h265 is now H.265 Mpeg2 is now MPEG-2 Real is now RealVideo XviD is now Xvid","title":"video_codec"},{"location":"migration2to3/#video_profile","text":"BP is now Baseline . HP is now High . XP is now Extended . MP is now Main . Hi422P is now High 4:2:2 . Hi444PP is now High 4:4:4 Predictive . High 10 was added. 8bit was removed. 8bit is detected as color_depth: 8-bit 10bit was removed. 10bit is detected as color_depth: 10-bit","title":"video_profile"},{"location":"migration2to3/#audio_codec","text":"DTS-HD was added. AC3 is now Dolby Digital EAC3 is now Dolby Digital Plus TrueHD is now Dolby TrueHD DolbyAtmos is now Dolby Atmos .","title":"audio_codec"},{"location":"migration2to3/#audio_profile","text":"HE is now High Efficiency . LC is now Low Complexity . HQ is now High Quality . HDMA is now Master Audio .","title":"audio_profile"},{"location":"migration2to3/#edition","text":"Collector Edition is now Collector Special Edition is now Special Criterion Edition is now Criterion Deluxe Edition is now Deluxe Limited Edition is now Limited Theatrical Edition is now Theatrical Director's Definitive Cut was added.","title":"edition"},{"location":"migration2to3/#episode_details","text":"Oav and Ova were removed. They are now other: Original Animated Video Omake is now Extras Final was added.","title":"episode_details"},{"location":"migration2to3/#other","text":"Rip was added. E.g.: DVDRip will output other: Rip DDC was removed. DDC is now edition: Director's Definitive Cut CC was removed. CC is now edition: Criterion FINAL was removed. FINAL is now episode_details: Final Original Animated Video was added. OV is now Original Video AudioFix is now Audio Fixed SyncFix is now Sync Fixed DualAudio is now Dual Audio Fansub is now Fan Subtitled Fastsub is now Fast Subtitled FullHD is now Full HD UltraHD is now Ultra HD mHD and HDLight are now Micro HD HQ is now High Quality HR is now High Resolution LD is now Line Dubbed MD is now Mic Dubbed Low Definition was added. LiNE is now Line Audio R5 is now Region 5 Region C was added. ReEncoded is now Reencoded WideScreen is now Widescreen","title":"other"},{"location":"properties/","text":"Properties \u00b6 Guessed values are cleaned up and given in a readable format which may not match exactly the raw filename. So, for instance, DVDSCR will be guessed as source = DVD + other = Screener 1920x1080 will be guessed as screen_size = 1080p DD5.1 will be guessed as audio_codec = Dolby Digital + audio_channels = 5.1 Main properties \u00b6 type Type of the file. episode , movie title Title of movie or episode. alternative_title Other titles found for movie. container Container of the file. 3g2 , 3gp , 3gp2 , asf , ass , avi , divx , flv , idx , iso , m4v , mk2 , mk3d , mkv , mka , mov , mp4 , mp4a , mpeg , mpg , nfo , nzb , ogg , ogm , ogv , qt , ra , ram , rm , srt , ssa , sub , torrent , ts , vob , wav , webm , wma , wmv mimetype Mime type of the related container. Guessed values may vary based on OS native support of mime type. date Date found in filename. year Year of movie (or episode). release_group Name of (non)scene group that released the file. website Name of website contained in the filename. streaming_service Name of the streaming service. A&E , ABC , ABC Australia , Adult Swim , Al Jazeera English , AMC , America's Test Kitchen , Amazon Prime , Animal Planet , AnimeLab , AOL , ARD , BBC iPlayer , BravoTV , Canal+ , Cartoon Network , CBC , CBS , Channel 4 , CHRGD , Cinemax , CNBC , Comedy Central , Comedians in Cars Getting Coffee , Country Music Television , Crackle , Crunchy Roll , CSpan , CTV , CuriosityStream , CWSeed , Daisuki , DC Universe , Deadhouse Films , DramaFever , Digiturk Diledigin Yerde , Discovery , DIY Network , Disney , Doc Club , DPlay , E! , ePix , El Trece , ESPN , Esquire , Family , Family Jr , Food Network , Fox , Freeform , FYI Network , Global , GloboSat Play , Hallmark , HBO Go , HGTV , History , Hulu , Investigation Discovery , IFC , iTunes , ITV , Knowledge Network , Lifetime , Motor Trend OnDemand , MBC , MSNBC , MTV , National Geographic , NBA TV , NBC , Netflix , NFL , NFL Now , NHL GameCenter , Nickelodeon , Norsk Rikskringkasting , OnDemandKorea , PBS , PBS Kids , Playstation Network , Pluzz , RTE One , SBS (AU) , SeeSo , Shomi , Spike , Spike TV , Sportsnet , Sprout , Stan , Starz , Sveriges Television , SwearNet , Syfy , TBS , TFou , The CW , TLC , TubiTV , TV3 Ireland , TV4 Sweeden , TVING , TV Land , UFC , UKTV , Univision , USA Network , Velocity , VH1 , Viceland , Viki , Vimeo , VRV , W Network , WatchMe , WWE Network , Xbox Video , Yahoo , YouTube Red , ZDF Episode properties \u00b6 season Season number. (Can be a list if several are found) episode Episode number. (Can be a list if several are found) disc Disc number. (Can be a list if several are found) episode_count Total number of episodes. season_count Total number of seasons. episode_details Some details about the episode. Final , Pilot , Special , Unaired episode_format Episode format of the series. Minisode part Part number of the video. (Can be a list if several are found) version Version of the episode. In anime fansub scene, new versions are released with tag <episode>v[0-9] . Video properties \u00b6 source Source of the release Analog HDTV , Blu-ray , Camera , Digital Master , Digital TV , DVD , HD Camera , HD Telecine , HD Telesync , HD-DVD , HDTV , Pay-per-view , Satellite , Telecine , Telesync , TV , Ultra HD Blu-ray , Ultra HDTV , VHS , Video on Demand , Web , Workprint screen_size Resolution of video. <width>x<height> , 360i , 360p , 368p , 480i , 480p , 540p , 576i , 576p , 720p , 900i , 900p , 1080i , 1080p , 1440p , 2160p , 4320p aspect_ratio Aspect ratio of video. Calculated using width and height from screen_size video_codec Codec used for video. DivX , H.263 , H.264 , H.265 , MPEG-2 , RealVideo , VP7 , VP8 , VP9 , Xvid video_profile Codec profile used for video. Baseline , High , High 10 , High 4:2:2 , High 4:4:4 Predictive , Main , Extended , Scalable Video Coding , Advanced Video Codec High Definition , High Efficiency Video Coding color_depth Bit depth used for video. - 8-bit , 10-bit , 12-bit - video_api API used for the video. DXVA video_bit_rate Video bit rate (Mbps). Examples: 25Mbps ( <BitRate [25Mbps]> ), 40Mbps ( <BitRate [40Mbps]> ). [<guessit.BitRate>] (object has magnitude and units ) frame_rate Video frame rate (frames per second). Examples: 25fps ( <FrameRate [25fps]> ), 60fps ( <FrameRate [60fps]> ). [<guessit.FrameRate>] (object has magnitude and units ) Audio properties \u00b6 audio_channels Number of channels for audio. 1.0 , 2.0 , 5.1 , 7.1 audio_codec Codec used for audio. AAC , Dolby Atmos , Dolby Digital , Dolby Digital Plus , Dolby TrueHD , DTS , FLAC , LPCM , MP2 , MP3 , Opus , PCM , Vorbis audio_profile The codec profile used for audio. Extended Surround , EX , High Efficiency , High Quality , High Resolution Audio , Low Complexity , Master Audio audio_bit_rate Audio bit rate (Kbps, Mbps). Examples: 448Kbps ( <BitRate [448Kbps]> ), 1.5Mbps ( <BitRate [1.5Mbps]> ). [<guessit.BitRate>] (object has magnitude and units ) Localization properties \u00b6 country Country(ies) of content. Often found in series, Shameless (US) for instance. [<babelfish.Country>] (This class equals name and iso code) language Language(s) of the audio soundtrack. [<babelfish.Language>] (This class equals name and iso code) subtitle_language Language(s) of the subtitles. [<babelfish.Language>] (This class equals name and iso code) Other properties \u00b6 bonus Bonus number. bonus_title Bonus title. cd CD number. cd_count Total count of CD. crc32 CRC32 of the file. uuid Volume identifier (UUID). size Size (MB, GB, TB). Examples: 1.2GB ( <Size [1.2GB]> ), 430MB ( <Size [430MB]> ). [<guessit.Size>] (object has magnitude and units ) edition Edition of the movie. Alternative Cut , Collector , Criterion , Deluxe , Director's Cut , Director's Definitive Cut , Extended , Fan , Festival , IMAX , Remastered , Special , Limited , Theatrical , Ultimate , Uncensored , Uncut , Unrated film Film number of this movie. film_title Film title of this movie. film_series Film series of this movie. other Other property will appear under this property. 3D , Audio Fixed , Bonus , BT.2020 , Classic , Colorized , Complete , Converted , Documentary , Dolby Vision , Dual Audio , East Coast Feed , Extras , Fan Subtitled , Fast Subtitled , Full HD , Hardcoded Subtitles , HD , HDR10 , High Frame Rate , Variable Frame Rate , High Quality , High Resolution , Internal , Line Dubbed , Line Audio , Mic Dubbed , Micro HD , Mux , NTSC , Obfuscated , Open Matte , Original Aspect Ratio , Original Video , PAL , Preair , Proof , Proper , PS Vita , Read NFO , Region 5 , Region C , Reencoded , Remux , Repost , Retail , Rip , Sample , Screener , SECAM , Standard Dynamic Range , Straight to Video , Sync Fixed , Trailer , Ultra HD , Upscaled , West Coast Feed , Widescreen , XXX","title":"Properties"},{"location":"properties/#properties","text":"Guessed values are cleaned up and given in a readable format which may not match exactly the raw filename. So, for instance, DVDSCR will be guessed as source = DVD + other = Screener 1920x1080 will be guessed as screen_size = 1080p DD5.1 will be guessed as audio_codec = Dolby Digital + audio_channels = 5.1","title":"Properties"},{"location":"properties/#main-properties","text":"type Type of the file. episode , movie title Title of movie or episode. alternative_title Other titles found for movie. container Container of the file. 3g2 , 3gp , 3gp2 , asf , ass , avi , divx , flv , idx , iso , m4v , mk2 , mk3d , mkv , mka , mov , mp4 , mp4a , mpeg , mpg , nfo , nzb , ogg , ogm , ogv , qt , ra , ram , rm , srt , ssa , sub , torrent , ts , vob , wav , webm , wma , wmv mimetype Mime type of the related container. Guessed values may vary based on OS native support of mime type. date Date found in filename. year Year of movie (or episode). release_group Name of (non)scene group that released the file. website Name of website contained in the filename. streaming_service Name of the streaming service. A&E , ABC , ABC Australia , Adult Swim , Al Jazeera English , AMC , America's Test Kitchen , Amazon Prime , Animal Planet , AnimeLab , AOL , ARD , BBC iPlayer , BravoTV , Canal+ , Cartoon Network , CBC , CBS , Channel 4 , CHRGD , Cinemax , CNBC , Comedy Central , Comedians in Cars Getting Coffee , Country Music Television , Crackle , Crunchy Roll , CSpan , CTV , CuriosityStream , CWSeed , Daisuki , DC Universe , Deadhouse Films , DramaFever , Digiturk Diledigin Yerde , Discovery , DIY Network , Disney , Doc Club , DPlay , E! , ePix , El Trece , ESPN , Esquire , Family , Family Jr , Food Network , Fox , Freeform , FYI Network , Global , GloboSat Play , Hallmark , HBO Go , HGTV , History , Hulu , Investigation Discovery , IFC , iTunes , ITV , Knowledge Network , Lifetime , Motor Trend OnDemand , MBC , MSNBC , MTV , National Geographic , NBA TV , NBC , Netflix , NFL , NFL Now , NHL GameCenter , Nickelodeon , Norsk Rikskringkasting , OnDemandKorea , PBS , PBS Kids , Playstation Network , Pluzz , RTE One , SBS (AU) , SeeSo , Shomi , Spike , Spike TV , Sportsnet , Sprout , Stan , Starz , Sveriges Television , SwearNet , Syfy , TBS , TFou , The CW , TLC , TubiTV , TV3 Ireland , TV4 Sweeden , TVING , TV Land , UFC , UKTV , Univision , USA Network , Velocity , VH1 , Viceland , Viki , Vimeo , VRV , W Network , WatchMe , WWE Network , Xbox Video , Yahoo , YouTube Red , ZDF","title":"Main properties"},{"location":"properties/#episode-properties","text":"season Season number. (Can be a list if several are found) episode Episode number. (Can be a list if several are found) disc Disc number. (Can be a list if several are found) episode_count Total number of episodes. season_count Total number of seasons. episode_details Some details about the episode. Final , Pilot , Special , Unaired episode_format Episode format of the series. Minisode part Part number of the video. (Can be a list if several are found) version Version of the episode. In anime fansub scene, new versions are released with tag <episode>v[0-9] .","title":"Episode properties"},{"location":"properties/#video-properties","text":"source Source of the release Analog HDTV , Blu-ray , Camera , Digital Master , Digital TV , DVD , HD Camera , HD Telecine , HD Telesync , HD-DVD , HDTV , Pay-per-view , Satellite , Telecine , Telesync , TV , Ultra HD Blu-ray , Ultra HDTV , VHS , Video on Demand , Web , Workprint screen_size Resolution of video. <width>x<height> , 360i , 360p , 368p , 480i , 480p , 540p , 576i , 576p , 720p , 900i , 900p , 1080i , 1080p , 1440p , 2160p , 4320p aspect_ratio Aspect ratio of video. Calculated using width and height from screen_size video_codec Codec used for video. DivX , H.263 , H.264 , H.265 , MPEG-2 , RealVideo , VP7 , VP8 , VP9 , Xvid video_profile Codec profile used for video. Baseline , High , High 10 , High 4:2:2 , High 4:4:4 Predictive , Main , Extended , Scalable Video Coding , Advanced Video Codec High Definition , High Efficiency Video Coding color_depth Bit depth used for video. - 8-bit , 10-bit , 12-bit - video_api API used for the video. DXVA video_bit_rate Video bit rate (Mbps). Examples: 25Mbps ( <BitRate [25Mbps]> ), 40Mbps ( <BitRate [40Mbps]> ). [<guessit.BitRate>] (object has magnitude and units ) frame_rate Video frame rate (frames per second). Examples: 25fps ( <FrameRate [25fps]> ), 60fps ( <FrameRate [60fps]> ). [<guessit.FrameRate>] (object has magnitude and units )","title":"Video properties"},{"location":"properties/#audio-properties","text":"audio_channels Number of channels for audio. 1.0 , 2.0 , 5.1 , 7.1 audio_codec Codec used for audio. AAC , Dolby Atmos , Dolby Digital , Dolby Digital Plus , Dolby TrueHD , DTS , FLAC , LPCM , MP2 , MP3 , Opus , PCM , Vorbis audio_profile The codec profile used for audio. Extended Surround , EX , High Efficiency , High Quality , High Resolution Audio , Low Complexity , Master Audio audio_bit_rate Audio bit rate (Kbps, Mbps). Examples: 448Kbps ( <BitRate [448Kbps]> ), 1.5Mbps ( <BitRate [1.5Mbps]> ). [<guessit.BitRate>] (object has magnitude and units )","title":"Audio properties"},{"location":"properties/#localization-properties","text":"country Country(ies) of content. Often found in series, Shameless (US) for instance. [<babelfish.Country>] (This class equals name and iso code) language Language(s) of the audio soundtrack. [<babelfish.Language>] (This class equals name and iso code) subtitle_language Language(s) of the subtitles. [<babelfish.Language>] (This class equals name and iso code)","title":"Localization properties"},{"location":"properties/#other-properties","text":"bonus Bonus number. bonus_title Bonus title. cd CD number. cd_count Total count of CD. crc32 CRC32 of the file. uuid Volume identifier (UUID). size Size (MB, GB, TB). Examples: 1.2GB ( <Size [1.2GB]> ), 430MB ( <Size [430MB]> ). [<guessit.Size>] (object has magnitude and units ) edition Edition of the movie. Alternative Cut , Collector , Criterion , Deluxe , Director's Cut , Director's Definitive Cut , Extended , Fan , Festival , IMAX , Remastered , Special , Limited , Theatrical , Ultimate , Uncensored , Uncut , Unrated film Film number of this movie. film_title Film title of this movie. film_series Film series of this movie. other Other property will appear under this property. 3D , Audio Fixed , Bonus , BT.2020 , Classic , Colorized , Complete , Converted , Documentary , Dolby Vision , Dual Audio , East Coast Feed , Extras , Fan Subtitled , Fast Subtitled , Full HD , Hardcoded Subtitles , HD , HDR10 , High Frame Rate , Variable Frame Rate , High Quality , High Resolution , Internal , Line Dubbed , Line Audio , Mic Dubbed , Micro HD , Mux , NTSC , Obfuscated , Open Matte , Original Aspect Ratio , Original Video , PAL , Preair , Proof , Proper , PS Vita , Read NFO , Region 5 , Region C , Reencoded , Remux , Repost , Retail , Rip , Sample , Screener , SECAM , Standard Dynamic Range , Straight to Video , Sync Fixed , Trailer , Ultra HD , Upscaled , West Coast Feed , Widescreen , XXX","title":"Other properties"},{"location":"sources/","text":"Getting the source code \u00b6 GuessIt is actively developed on GitHub . You can either clone the public repository: $ git clone https://github.com/guessit-io/guessit.git Download the tarball : $ curl -L https://github.com/guessit-io/guessit/tarball/master -o guessit.tar.gz Or download the zipball : $ curl -L https://github.com/guessit-io/guessit/zipball/master -o guessit.zip Once you have a copy of the source, you can embed it in your Python package, install it into your site-packages folder like that: $ python setup.py install or use it directly from the source folder for development: $ python setup.py develop","title":"Sources"},{"location":"sources/#getting-the-source-code","text":"GuessIt is actively developed on GitHub . You can either clone the public repository: $ git clone https://github.com/guessit-io/guessit.git Download the tarball : $ curl -L https://github.com/guessit-io/guessit/tarball/master -o guessit.tar.gz Or download the zipball : $ curl -L https://github.com/guessit-io/guessit/zipball/master -o guessit.zip Once you have a copy of the source, you can embed it in your Python package, install it into your site-packages folder like that: $ python setup.py install or use it directly from the source folder for development: $ python setup.py develop","title":"Getting the source code"}]}